{"version":3,"sources":["redux/header/header.selector.js","components/header-background/header-background.component.jsx","redux/header/header.types.js","components/header-menu/header-menu.component.jsx","redux/header/header.actions.js","components/arrow/arrow.component.jsx","components/header-footer/header-footer.component.jsx","components/title/title.component.jsx","components/header-left-side/header-left-side.component.jsx","components/arrow/arrow-forward.component.jsx","components/header-image/header-image.component.jsx","components/header-block/header-block.component.jsx","components/project-view/project-view.component.jsx","components/body-block/body-block.component.jsx","App.js","serviceWorker.js","redux/header/header.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["selectHeader","state","header","selectPrimaryColor","createSelector","primaryColor","selectSlideToShow","slideIdToShowArray","selectTitleToShow","titleToShow","selectDarkModeBackground","darkMode","selectDarkModeText","HeaderBackgroundContainer","styled","div","props","HeaderBackgroundTopContainer","mapStateToProps","createStructuredSelector","connect","headerTypes","UPDATE_PRIMARYCOLOR","UPDATE_SLIDE","UPDATE_TITLE","UPDATE_HEADER","UPDATE_HEADER_FORWARD","SWITCH_MODE","HeaderMenuContainer","MenuSpan","span","IconSpan","dispatch","switchMode","type","onClick","fontSize","ArrowContainer","updateHeader","HeaderFooterContainer","HeaderSocialMedia","HeaderFooter","TitleContainer","TitleAnimation","h1","Title","title","HeaderLeftSideContainer","ArrowForwardContainer","updateHeaderForward","HeaderImageContainer","ImageFooterContainer","ImageSlider","Slide","imageUrl","slideIdToShow","id","console","log","HeaderBlockContainer","ProjectViewContainer","InfoContainer","Image","img","info","src","BodyBlockContainer","GlobalStyle","createGlobalStyle","darkModeBackground","Boolean","window","location","hostname","match","INITIAL_STATE","secondaryColor","headerReducer","action","rootReducer","combineReducers","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd6fae4f.chunk.js","sourcesContent":["import { createSelector} from 'reselect'\r\n\r\nconst selectHeader = state => state.header\r\n\r\nexport const selectPrimaryColor = createSelector(\r\n    [selectHeader],\r\n    header => header.primaryColor[0]\r\n)\r\n\r\nexport const selectSlideToShow = createSelector(\r\n    [selectHeader],\r\n    header => header.slideIdToShowArray[0]\r\n)\r\n\r\nexport const selectTitleToShow = createSelector(\r\n    [selectHeader],\r\n    header => header.titleToShow[0]\r\n)\r\nexport const selectDarkModeBackground = createSelector(\r\n    [selectHeader],\r\n    header => header.darkMode[0]\r\n)\r\nexport const selectDarkModeText= createSelector(\r\n    [selectHeader],\r\n    header => header.darkMode[1]\r\n)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport { selectPrimaryColor } from '../../redux/header/header.selector'\r\n\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst HeaderBackgroundContainer = styled.div`\r\nwidth: 100vw;\r\nheight:85vh;\r\nbackground-color: ${props => props.primaryColor};\r\ntransition: background-color 0.5s ease-in-out;\r\nposition:fixed;\r\ntop:0;\r\nz-index: -1;\r\n`\r\nconst HeaderBackgroundTopContainer = styled.div`\r\nwidth: 100vw;\r\nheight:10vh;\r\nbackground-color: ${props => props.primaryColor};\r\ntransition: background-color 0.5s ease-in-out;\r\nposition:fixed;\r\ntop:0;\r\nz-index: 10;\r\n@media screen and (max-width: 800px) {\r\n    height: 2.5vh;\r\n  }\r\n`\r\n\r\nconst HeaderBackground = ({ primaryColor }) => (\r\n<div>\r\n<HeaderBackgroundTopContainer primaryColor={primaryColor}/>\r\n<HeaderBackgroundContainer primaryColor={primaryColor} />\r\n</div>\r\n)\r\nconst mapStateToProps = createStructuredSelector({\r\n    primaryColor: selectPrimaryColor\r\n  })\r\n  \r\n  export default connect(mapStateToProps)(HeaderBackground);","const headerTypes = {\r\n    UPDATE_PRIMARYCOLOR: 'UPDATE_PRIMARYCOLOR',\r\n    UPDATE_SLIDE: 'UPDATE_SLIDE',\r\n    UPDATE_TITLE: 'UPDATE_TITLE',\r\n    UPDATE_HEADER: 'UPDATE_HEADER',\r\n    UPDATE_HEADER_FORWARD: 'UPDATE_HEADER_FORWARD',\r\n    SWITCH_MODE: 'SWITCH_MODE',\r\n}\r\n\r\nexport default headerTypes","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\r\nimport { connect } from \"react-redux\";\r\nimport { switchMode } from '../../redux/header/header.actions'\r\n\r\n\r\n\r\nconst HeaderMenuContainer = styled.div`\r\nheight: 80px;\r\ndisplay: flex;\r\njustify-content: space-between;\r\npadding: 20px;\r\n`\r\nconst MenuSpan = styled.span`\r\ncursor:pointer;\r\npadding: 10px;\r\nz-index: 6;\r\ntransition: all 0.3s ease-in-out;\r\n\r\n&:hover {\r\n    font-size:1.2rem;\r\n  }\r\n`\r\n\r\nconst IconSpan = styled.span`\r\ncursor:pointer;\r\nz-index: 6;\r\n`\r\n\r\nconst HeaderMenu = ({switchMode}) => (\r\n<HeaderMenuContainer>\r\n<IconSpan onClick={() => switchMode()}><Brightness4Icon fontSize=\"large\"/></IconSpan>\r\n<MenuSpan>Product</MenuSpan>\r\n<MenuSpan>About</MenuSpan>\r\n<MenuSpan>Contact</MenuSpan>\r\n</HeaderMenuContainer>)\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    switchMode: () => dispatch(switchMode()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(HeaderMenu);\r\n","import headerTypes from './header.types'\r\n\r\nexport const updateColor = () => ({\r\n    type: headerTypes.UPDATE_PRIMARYCOLOR,\r\n})\r\n\r\nexport const updateSlide = () => ({\r\n    type: headerTypes.UPDATE_SLIDE,\r\n})\r\n\r\nexport const updateTitle = () => ({\r\n    type: headerTypes.UPDATE_TITLE,\r\n})\r\n\r\nexport const updateHeader = () => ({\r\n    type: headerTypes.UPDATE_HEADER,\r\n\r\n})\r\n\r\nexport const updateHeaderForward = () => ({\r\n    type: headerTypes.UPDATE_HEADER_FORWARD,\r\n\r\n})\r\nexport const switchMode = () => ({\r\n    type: headerTypes.SWITCH_MODE,\r\n\r\n})","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateHeader } from '../../redux/header/header.actions'\r\nimport { createStructuredSelector } from 'reselect'\r\nimport { selectPrimaryColor } from '../../redux/header/header.selector'\r\n\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\nconst ArrowContainer = styled.div`\r\n  width: 100px;\r\n  height: 80px;\r\n  background-color: ${props => props.primaryColor};\r\n  transition: background-color 0.5s ease-in-out;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Arrow = ({ updateHeader, primaryColor }) => (\r\n  <ArrowContainer primaryColor={primaryColor} onClick={() => updateHeader() }>\r\n    <ArrowBackIcon fontSize=\"large\" />\r\n  </ArrowContainer>\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateHeader: () => dispatch(updateHeader()),\r\n});\r\nconst mapStateToProps = createStructuredSelector({\r\n  primaryColor: selectPrimaryColor\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Arrow);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\n\r\nimport Arrow from \"../arrow/arrow.component\";\r\n\r\nconst HeaderFooterContainer = styled.div`\r\n  width: 100%;\r\n  height: 80px;\r\n  place-self: self-end;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst HeaderSocialMedia = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: 1fr;\r\npadding: 20px;\r\nmargin-top: -100px;\r\ncursor:pointer;\r\n`;\r\n\r\nconst HeaderFooter = () => (\r\n  <HeaderFooterContainer>\r\n    <HeaderSocialMedia>\r\n      <TwitterIcon />\r\n      <LinkedInIcon />\r\n      <GitHubIcon />\r\n    </HeaderSocialMedia>\r\n    <Arrow />\r\n  </HeaderFooterContainer>\r\n);\r\n\r\nexport default HeaderFooter;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TitleContainer = styled.div`\r\n  padding: 10px;\r\n  font-size: 1.8rem;\r\n  z-index: 5;\r\n`;\r\n\r\nconst TitleAnimation = styled.h1`\r\n    border-right: ${props => (props.header ? 'none' : ' .15em solid orange')};\r\n    animation: ${props => (props.header ? 'none' : ' blink-caret .75s step-end infinite')};\r\n    margin-left: ${props => (props.header ? \"5vw\" : \"0px\")};\r\n\r\n  @keyframes blink-caret {\r\n    from, to { border-color: transparent }\r\n    50% { border-color: orange; }\r\n  }\r\n`\r\n\r\nconst Title = ({ title, header }) => (\r\n  <TitleContainer>\r\n    <TitleAnimation header={header}>{title}</TitleAnimation>\r\n  </TitleContainer>\r\n);\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { connect } from 'react-redux'\r\nimport { selectDarkModeBackground } from '../../redux/header/header.selector'\r\nimport { createStructuredSelector} from 'reselect'\r\nimport { selectTitleToShow } from \"../../redux/header/header.selector\";\r\n\r\n\r\n\r\n\r\nimport HeaderMenu from \"../header-menu/header-menu.component\";\r\nimport HeaderFooter from \"../header-footer/header-footer.component\";\r\nimport Title from \"../title/title.component\";\r\n\r\nconst HeaderLeftSideContainer = styled.div`\r\n  width: 100%;\r\n  height: 75vh;\r\n  background-color: ${props => props.darkMode};\r\n  display: grid;\r\n`;\r\n\r\nconst HeaderLeftSide = ({ darkMode, title }) => (\r\n  <HeaderLeftSideContainer darkMode={darkMode} >\r\n    <HeaderMenu />\r\n    <Title header title={title} />\r\n    <HeaderFooter />\r\n  </HeaderLeftSideContainer>\r\n);\r\nconst mapStateToProps = createStructuredSelector({\r\n  darkMode: selectDarkModeBackground,\r\n  title: selectTitleToShow\r\n})\r\n\r\nexport default connect(mapStateToProps)(HeaderLeftSide);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\r\n\r\nimport { selectDarkModeBackground } from '../../redux/header/header.selector'\r\nimport { createStructuredSelector} from 'reselect'\r\nimport { connect } from \"react-redux\";\r\nimport { updateHeaderForward } from \"../../redux/header/header.actions\";\r\n\r\nconst ArrowForwardContainer = styled.div`\r\n  width: 100px;\r\n  height: 80px;\r\n  background-color: ${props => props.darkMode};\r\n  transition: background-color 0.5s ease-in-out;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ArrowForward = ({ updateHeaderForward, darkMode }) => (\r\n  <ArrowForwardContainer darkMode={darkMode} onClick={() => updateHeaderForward()}>\r\n    <ArrowForwardIcon fontSize=\"large\" />\r\n  </ArrowForwardContainer>\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateHeaderForward: () => dispatch(updateHeaderForward())\r\n});\r\nconst mapStateToProps = createStructuredSelector({\r\n  darkMode: selectDarkModeBackground\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArrowForward);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { selectSlideToShow } from \"../../redux/header/header.selector\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport ArrowForward from \"../arrow/arrow-forward.component\";\r\n\r\nconst HeaderImageContainer = styled.div`\r\n  width: 100%;\r\n  height: 75vh;\r\n  background-color: red;\r\n  display: grid;\r\n  position: relative;\r\n`;\r\nconst ImageFooterContainer = styled.div`\r\n  width: 100%;\r\n  height: 80px;\r\n  place-self: self-end;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  position: absolute;\r\n`;\r\nconst ImageSlider = styled.div`\r\n  width: 100%;\r\n  height: 75vh;\r\n  display: flex;\r\n  overflow-x: auto;\r\n  background-color: white;\r\n  overflow: hidden;\r\n  position: relative;\r\n`;\r\nconst Slide = styled.div`\r\n  width: 100%;\r\n  height: 75vh;\r\n  flex-shrink: 0;\r\n  background-image: ${({ imageUrl }) => `url(${imageUrl})`};\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat:no-repeat;\r\n  transition: opacity 0.5s ease-in-out;\r\n  opacity: ${({ slideIdToShow, id }) => (slideIdToShow === id ? \"1\" : \"0\")};\r\n  position: absolute;\r\n`;\r\n\r\nconst HeaderImage = ({ slideIdToShow }) => {\r\n  console.log(slideIdToShow);\r\n  return (\r\n    <HeaderImageContainer>\r\n      <ImageSlider>\r\n        <Slide\r\n          id=\"slide1\"\r\n          slideIdToShow={slideIdToShow}\r\n          imageUrl=\"https://i.ibb.co/dkq68sw/prod3.jpg\"\r\n        />\r\n        <Slide\r\n          id=\"slide2\"\r\n          slideIdToShow={slideIdToShow}\r\n          imageUrl=\"https://i.ibb.co/bzrHtQx/prod2.jpg\"\r\n        />\r\n        <Slide\r\n          id=\"slide3\"\r\n          slideIdToShow={slideIdToShow}\r\n          imageUrl=\"https://i.ibb.co/WpnrpG0/prod1.jpg\"\r\n        />\r\n      </ImageSlider>\r\n      <ImageFooterContainer>\r\n        <ArrowForward />\r\n      </ImageFooterContainer>\r\n    </HeaderImageContainer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  slideIdToShow: selectSlideToShow\r\n});\r\n\r\nexport default connect(mapStateToProps)(HeaderImage);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { selectDarkModeBackground } from \"../../redux/header/header.selector\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport HeaderLeftSide from \"../header-left-side/header-left-side.component\";\r\nimport HeaderImage from \"../header-image/header-image.component\";\r\n\r\nconst HeaderBlockContainer = styled.div`\r\n  width: 90vw;\r\n  max-width: 1140px;\r\n  height: 90vh;\r\n  background-color: ${props => props.darkMode};\r\n  margin: auto;\r\n  margin-top: 10vh;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.5),\r\n    -10px 10px 10px rgba(0, 0, 0, 0.5);\r\n\r\n  @media screen and (max-width: 800px) {\r\n    margin-top: 2.5vh;\r\n  }\r\n`;\r\n\r\nconst HeaderBlock = ({ darkMode }) => (\r\n  <HeaderBlockContainer darkMode={darkMode}>\r\n    <HeaderLeftSide />\r\n    <HeaderImage />\r\n  </HeaderBlockContainer>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  darkMode: selectDarkModeBackground\r\n});\r\n\r\nexport default connect(mapStateToProps)(HeaderBlock);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectDarkModeBackground } from \"../../redux/header/header.selector\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nconst ProjectViewContainer = styled.div`\r\n  width: 90%;\r\n  height: 400px;\r\n  background-color: ${props => props.darkMode};\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  margin: 50px 0px;\r\n`;\r\nconst InfoContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\nconst Image = styled.img`\r\n  max-width: 640px;\r\n  width: 100%;\r\n  height: auto;\r\n  box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.5), -10px 10px 10px rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nconst ProjectView = ({ title, info, imageUrl, darkMode }) => (\r\n  <ProjectViewContainer darkMode={darkMode}>\r\n    <InfoContainer>\r\n      <h2>{title}</h2>\r\n      <p>{info}</p>\r\n    </InfoContainer>\r\n    <Image src={imageUrl} />\r\n  </ProjectViewContainer>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  darkMode: selectDarkModeBackground\r\n});\r\n\r\nexport default connect(mapStateToProps)(ProjectView);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ProjectView from \"../project-view/project-view.component\";\r\nimport Title from '../title/title.component'\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { selectDarkModeBackground } from \"../../redux/header/header.selector\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nconst BodyBlockContainer = styled.div`\r\n  width: 90vw;\r\n  max-width: 1140px;\r\n  height: 1400px;\r\n  background-color: ${props => props.darkMode};\r\n  margin: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.5),\r\n    -10px 10px 10px rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nconst BodyBlock = ({ darkMode }) => (\r\n  <BodyBlockContainer darkMode={darkMode}>\r\n    <Title title=\"Details\"/>\r\n  </BodyBlockContainer>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  darkMode: selectDarkModeBackground\r\n});\r\n\r\nexport default connect(mapStateToProps)(BodyBlock);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { connect } from 'react-redux'\nimport { createStructuredSelector} from 'reselect'\nimport { selectDarkModeText, selectDarkModeBackground } from './redux/header/header.selector'\n\nimport { createGlobalStyle } from 'styled-components'\nimport HeaderBackground from \"./components/header-background/header-background.component\";\nimport HeaderBlock from './components/header-block/header-block.component'\nimport BodyBlock from './components/body-block/body-block.component'\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  color: ${props => props.darkMode};\n  background: ${props => props.darkModeBackground};\n  padding-bottom: 15vh;\n}\n::-webkit-scrollbar {\n  width: 15px;\n  height: 15px;\n}\n\n::-webkit-scrollbar-track-piece  {\n  background-color: ${props => props.darkMode};\n}\n\n::-webkit-scrollbar-thumb:vertical {\n  height: 30px;\n  background-color: orange;\n}\n`\nconst App = ({ darkMode, darkModeBackground }) => (\n      <div>\n        <GlobalStyle darkMode={darkMode} darkModeBackground={darkModeBackground} />\n        <HeaderBackground />\n        <HeaderBlock />\n        <BodyBlock />\n      </div>\n    );\nconst mapStateToProps = createStructuredSelector({\n  darkMode: selectDarkModeText,\n  darkModeBackground: selectDarkModeBackground,\n})\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import headerTypes from \"./header.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  primaryColor: [\"#702632\",\"#40434E\",\"#381460\"],\r\n  secondaryColor: [\"#f38181\", \"#fce38a\", \"#95e1d3\"],\r\n  darkMode: ['#222831','#eaffd0'],\r\n  slideIdToShowArray: [\"slide1\", \"slide2\", \"slide3\"],\r\n  titleToShow: [\"Vitality Shot\", \"Get back to your roots\", \"Choice of flavours\"]\r\n};\r\n\r\nconst headerReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case headerTypes.SWITCH_MODE:\r\n      return {\r\n        ...state,\r\n        darkMode: [state.darkMode[1],state.darkMode[0]],\r\n        primaryColor: [state.secondaryColor[0], state.secondaryColor[1], state.secondaryColor[2],],\r\n        secondaryColor: [state.primaryColor[0], state.primaryColor[1], state.primaryColor[2],],\r\n      }\r\n    case headerTypes.UPDATE_PRIMARYCOLOR:\r\n      return {\r\n        ...state,\r\n        primaryColor: [\r\n          state.primaryColor[1],\r\n          state.primaryColor[2],\r\n          state.primaryColor[0]\r\n        ]\r\n      };\r\n    case headerTypes.UPDATE_SLIDE:\r\n      return {\r\n        ...state,\r\n        slideIdToShowArray: [\r\n          state.slideIdToShowArray[1],\r\n          state.slideIdToShowArray[2],\r\n          state.slideIdToShowArray[0]\r\n        ]\r\n      };\r\n    case headerTypes.UPDATE_TITLE:\r\n      return {\r\n        ...state,\r\n        titleToShow: [\r\n          state.titleToShow[1],\r\n          state.titleToShow[2],\r\n          state.titleToShow[0]\r\n        ]\r\n      };\r\n    case headerTypes.UPDATE_HEADER:\r\n      return {\r\n        ...state,\r\n        primaryColor: [\r\n          state.primaryColor[1],\r\n          state.primaryColor[2],\r\n          state.primaryColor[0]\r\n        ],\r\n        slideIdToShowArray: [\r\n          state.slideIdToShowArray[1],\r\n          state.slideIdToShowArray[2],\r\n          state.slideIdToShowArray[0]\r\n        ],\r\n        titleToShow: [\r\n          state.titleToShow[1],\r\n          state.titleToShow[2],\r\n          state.titleToShow[0]\r\n        ]\r\n      };\r\n    case headerTypes.UPDATE_HEADER_FORWARD:\r\n      return {\r\n        ...state,\r\n        primaryColor: [\r\n          state.primaryColor[2],\r\n          state.primaryColor[0],\r\n          state.primaryColor[1]\r\n        ],\r\n        slideIdToShowArray: [\r\n          state.slideIdToShowArray[2],\r\n          state.slideIdToShowArray[0],\r\n          state.slideIdToShowArray[1]\r\n        ],\r\n        titleToShow: [\r\n          state.titleToShow[2],\r\n          state.titleToShow[0],\r\n          state.titleToShow[1]\r\n        ]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default headerReducer;\r\n","import { combineReducers } from 'redux'\r\n\r\nimport headerReducer from './header/header.reducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    header: headerReducer\r\n})\r\n\r\nexport default rootReducer\r\n","  \r\nimport { createStore, applyMiddleware } from 'redux'\r\n\r\nimport rootReducer from './root-reducer'\r\n\r\nconst middlewares = []\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares))","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}